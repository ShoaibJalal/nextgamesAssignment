{"version":3,"sources":["components/layout/Header.js","reducers/statusReducer.js","reducers/incidentReducer.js","reducers/index.js","actions/types.js","store.js","components/Statuses/Status.js","components/Statuses/Statuses.js","actions/statusActions.js","components/layout/TextInputGroup.js","components/Statuses/AddStatus.js","actions/incidentActions.js","components/Incidents/ServiceIncidents.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","title","className","href","to","defaultProps","initialState","statuses","id","uuid","region","productAndServices","status","incidents","combineReducers","state","action","type","payload","incident","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","Status","this","map","key","classnames","Component","Statuses","getStatuses","class","role","connect","TextInputGroup","label","name","value","placeholder","onChange","error","htmlFor","AddStatus","errors","onSubmit","e","preventDefault","newStatus","addStatus","setState","history","push","target","parser","require","ServiceIncidents","getIncidents","recentIncident","i","dispatch","a","parseURL","CORS_PROXY","feed","recentIncidents","items","console","log","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ff2ea31e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Header = props => {\r\n  const { title } = props;\r\n  return (\r\n    <nav className=\"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\">\r\n      <div className=\"container\">\r\n        <a href=\"/\" className=\"navbar-brand\">\r\n          {title}\r\n        </a>\r\n        <div>\r\n          <ul className=\"navbar-nav mr-auto\">\r\n            <li className=\"nav-item\">\r\n              <Link to=\"/\" className=\"nav-link\">\r\n                <i className=\"fas fa-home\" /> Home\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link to=\"/incidents\" className=\"nav-link\">\r\n                <i className=\"fas fa-info\" /> Incidents\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link to=\"/status/add\" className=\"nav-link\">\r\n                <i className=\"fas fa-plus\" /> Add\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nHeader.defaultProps = {\r\n  title: \"Status App\"\r\n};\r\n\r\nHeader.propTypes = {\r\n  title: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Header;\r\n","import { GET_STATUSES, ADD_STATUS } from \"../actions/types\";\r\nimport uuid from \"uuid\";\r\n\r\nconst initialState = {\r\n  statuses: [\r\n    {\r\n      id: uuid(),\r\n      region: \"EAST US\",\r\n      productAndServices: \"Virtual Machines\",\r\n      status: \"Good\"\r\n    },\r\n    {\r\n      id: uuid(),\r\n      region: \"EAST US2\",\r\n      productAndServices: \"Azure Functions\",\r\n      status: \"Information\"\r\n    },\r\n    {\r\n      id: uuid(),\r\n      region: \"North Europe\",\r\n      productAndServices: \"Cloud services\",\r\n      status: \"Warning\"\r\n    }\r\n  ],\r\n  status: {}\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_STATUSES:\r\n      return {\r\n        ...state\r\n      };\r\n\r\n    case ADD_STATUS:\r\n      return {\r\n        ...state,\r\n        statuses: [action.payload, ...state.statuses]\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { GET_INCIDENTS } from \"../actions/types\";\r\n\r\nconst initialState = {\r\n  incidents: []\r\n};\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_INCIDENTS:\r\n      return { ...state, incidents: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport statusReducer from \"./statusReducer\";\r\nimport incidentReducer from \"./incidentReducer\";\r\n\r\nexport default combineReducers({\r\n  status: statusReducer,\r\n  incident: incidentReducer\r\n});\r\n","export const GET_STATUSES = \"GET_STATUSES\";\r\nexport const ADD_STATUS = \"ADD_STATUS\";\r\n\r\nexport const GET_INCIDENTS = \"GET_INCIDENTS\";\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  compose(\r\n    applyMiddleware(...middleware),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n  )\r\n);\r\n\r\nexport default store;\r\n","import React, { Component } from \"react\";\r\nimport classnames from \"classnames\";\r\n\r\nclass Status extends Component {\r\n  render() {\r\n    const { statuses } = this.props;\r\n    return (\r\n      <table className=\"table table-striped\">\r\n        <thead className=\"thead-inverse\">\r\n          <tr>\r\n            <th>Services</th>\r\n            <th>Region</th>\r\n            <th>Status</th>\r\n            <th />\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {statuses.map(status => (\r\n            <tr key={status.id}>\r\n              <td>{status.productAndServices}</td>\r\n              <td>{status.region}</td>\r\n              <td>\r\n                <span\r\n                  className={classnames({\r\n                    \"text-success\": status.status === \"Good\",\r\n                    \"text-primary\": status.status === \"Information\",\r\n                    \"text-warning\": status.status === \"Warning\",\r\n                    \"text-danger\": status.status === \"Critical\"\r\n                  })}\r\n                >\r\n                  {status.status}\r\n                </span>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n}\r\nexport default Status;\r\n","import React, { Component } from \"react\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport Status from \"./Status\";\r\nimport { getStatuses } from \"../../actions/statusActions\";\r\n\r\nclass Statuses extends Component {\r\n  componentDidMount() {\r\n    this.props.getStatuses();\r\n  }\r\n\r\n  render() {\r\n    const { statuses } = this.props;\r\n    if (statuses) {\r\n      return (\r\n        <>\r\n          <div className=\"row\">\r\n            <h2>STATUSES</h2>\r\n          </div>\r\n\r\n          <Status statuses={statuses} />\r\n        </>\r\n      );\r\n    } else {\r\n      return (\r\n        <div class=\"spinner-border\" role=\"status\">\r\n          <span class=\"sr-only\">Loading...</span>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nStatuses.propTypes = {\r\n  statuses: PropTypes.array.isRequired,\r\n  getStatuses: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  statuses: state.status.statuses\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getStatuses }\r\n)(Statuses);\r\n","import { GET_STATUSES, ADD_STATUS } from \"./types\";\r\n\r\nexport const getStatuses = () => {\r\n  return {\r\n    type: GET_STATUSES\r\n  };\r\n};\r\n\r\nexport const addStatus = status => {\r\n  return {\r\n    type: ADD_STATUS,\r\n    payload: status\r\n  };\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames';\r\n\r\nconst TextInputGroup = ({\r\n  label,\r\n  name,\r\n  value,\r\n  placeholder,\r\n  type,\r\n  onChange,\r\n  error\r\n}) => {\r\n  return (\r\n    <div className=\"form-group\">\r\n      <label htmlFor={name}>{label}</label>\r\n      <input\r\n        type={type}\r\n        name={name}\r\n        className={classnames('form-control form-control-lg', {\r\n          'is-invalid': error\r\n        })}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n      {error && <div className=\"invalid-feedback\">{error}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nTextInputGroup.propTypes = {\r\n  label: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  placeholder: PropTypes.string.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n  type: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n  error: PropTypes.string\r\n};\r\n\r\nTextInputGroup.defaultProps = {\r\n  type: 'text'\r\n};\r\n\r\nexport default TextInputGroup;\r\n","import React, { Component } from 'react';\r\nimport TextInputGroup from '../layout/TextInputGroup';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport uuid from 'uuid';\r\n\r\nimport {addStatus} from '../../actions/statusActions';\r\n\r\nclass AddStatus extends Component {\r\n\r\n  state = {\r\n      region:\"\",\r\n      productAndServices:\"\",\r\n      status:\"\",\r\n      errors:{}\r\n  };\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n    const {region, productAndServices, status} = this.state;\r\n    \r\n    // Checking errors\r\n    if(region === ''){\r\n      this.setState({ errors:{ region: \"Region is Required\"} })\r\n      return;\r\n    }\r\n    if(productAndServices === ''){\r\n      this.setState({ errors:{ productAndServices: \"Service is Required\"} })\r\n      return;\r\n    }\r\n    if(status === ''){\r\n      this.setState({ errors:{ status : \"Status is Required\"} })\r\n      return;\r\n    }\r\n\r\n    const newStatus ={\r\n      id: uuid(),\r\n      region,\r\n      productAndServices,\r\n      status\r\n    };\r\n\r\n    this.props.addStatus(newStatus)\r\n\r\n    //clearing state\r\n    this.setState({\r\n      region:\"\",\r\n      productAndServices:\"\",\r\n      status:\"\",\r\n      errors:{}\r\n    });\r\n    this.props.history.push('/');\r\n\r\n  }\r\n  onChange = e => this.setState({ [e.target.name]: e.target.value });\r\n\r\n  render () {\r\n    const {region, productAndServices, status, errors} = this.state;\r\n    return(\r\n      <div className=\"card mb-3\">\r\n        <div className=\"card-header\">Add Status</div>\r\n        <div className=\"card-body\">\r\n          <form onSubmit={this.onSubmit}>\r\n            <TextInputGroup\r\n              label=\"Service\"\r\n              name=\"productAndServices\"\r\n              placeholder=\"Enter Service\"\r\n              value={productAndServices}\r\n              onChange={this.onChange}\r\n              error={errors.productAndServices}\r\n            />\r\n            <TextInputGroup\r\n              label=\"Region\"\r\n              name=\"region\"\r\n              \r\n              placeholder=\"Enter Region\"\r\n              value={region}\r\n              onChange={this.onChange}\r\n              error={errors.region}\r\n            />\r\n            <TextInputGroup\r\n              label=\"Status\"\r\n              name=\"status\"\r\n              placeholder=\"Enter Status\"\r\n              value={status}\r\n              onChange={this.onChange}\r\n              error={errors.status}\r\n            />\r\n            <input\r\n              type=\"submit\"\r\n              value=\"Add Status\"\r\n              className=\"btn btn-light btn-block\"\r\n            />\r\n          </form>\r\n        </div>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nAddStatus.propTypes = {\r\n  addStatus: PropTypes.func.isRequired\r\n}\r\n\r\nexport default connect(null, {addStatus})(AddStatus);","import { GET_INCIDENTS } from \"./types\";\r\nlet Parser = require(\"rss-parser\");\r\nlet parser = new Parser();\r\n\r\nconst CORS_PROXY = \"https://cors-anywhere.herokuapp.com/\";\r\nexport const getIncidents = () => async dispatch => {\r\n  let feed = await parser.parseURL(\r\n    CORS_PROXY + \"https://status.datadoghq.com/history.rss\"\r\n  );\r\n\r\n  let recentIncidents = [];\r\n  for (let i = 0; i < 5; i++) {\r\n    recentIncidents.push(feed.items[i]);\r\n  }\r\n  console.log(recentIncidents);\r\n\r\n  dispatch({\r\n    type: GET_INCIDENTS,\r\n    payload: recentIncidents\r\n  });\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { getIncidents } from \"../../actions/incidentActions\";\r\n\r\nclass ServiceIncidents extends Component {\r\n  componentDidMount() {\r\n    this.props.getIncidents();\r\n  }\r\n\r\n  render() {\r\n    const { incidents } = this.props;\r\n\r\n    if (incidents) {\r\n      return (\r\n        <div className=\"container\">\r\n          <h1 className=\"display-4 mb-2\">\r\n            <span className=\"text-danger\">Incidents</span> List\r\n          </h1>\r\n          {incidents.map((recentIncident, i) => (\r\n            <div key={i} className=\"card card-body mb-3\">\r\n              <h4>{recentIncident.title}</h4>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div class=\"spinner-border\" role=\"status\">\r\n          <span class=\"sr-only\">Loading...</span>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nServiceIncidents.propTypes = {\r\n  incidents: PropTypes.array.isRequired,\r\n  getIncidents: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  incidents: state.incident.incidents\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getIncidents }\r\n)(ServiceIncidents);\r\n","import React, { Component } from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Header from \"./components/layout/Header\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport Statuses from \"./components/Statuses/Statuses\";\nimport AddStatus from \"./components/Statuses/AddStatus\";\n\nimport ServiceIncidents from \"./components/Incidents/ServiceIncidents\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Router>\n          <div className=\"App\">\n            <Header title=\"New Games Assignment\" />\n            <div className=\"container\">\n              <Switch>\n                <Route exact path=\"/\" component={Statuses} />\n                <Route path=\"/incidents\" component={ServiceIncidents} />\n                <Route exact path=\"/status/add\" component={AddStatus} />\n                />\n              </Switch>\n            </div>\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}